#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        mouseMove: mouseMove {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSEMOVE";
            bindings = <&mmv>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 19 35 21>;
        };

        mouseClick: mouseClick {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSECLICK";
            bindings = <&mkp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <20>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        GamingLayer {
            bindings = <&gaming_toggleRgb>;
            key-positions = <45 47 46>;
            layers = <0>;
        };

        windows {
            bindings = <&kp LEFT_WIN>;
            key-positions = <45 46>;
            layers = <0>;
        };

        default_laout {
            bindings = <&defaul_toggleRgb>;
            key-positions = <46 47 45>;
            layers = <4 5 6>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <22 23>;
            layers = <0>;
        };

        unterstrich {
            bindings = <&kp UNDERSCORE>;
            key-positions = <36 37>;
            layers = <0>;
        };

        oe {
            bindings = <&oe_umlaut>;
            key-positions = <10 3>;
            layers = <0>;
        };

        ae {
            bindings = <&ae_umlaut>;
            key-positions = <3 14>;
            layers = <0>;
        };

        ue {
            bindings = <&ue_umlaut>;
            key-positions = <3 8>;
            layers = <0>;
        };
    };

    macros {
        gaming_toggleRgb: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &rgb_ug RGB_TOG>;
            label = "NEW_MACRO";
        };

        defaul_toggleRgb: defaul_toggleRgb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &rgb_ug RGB_TOG>;
            label = "DEFAUL_TOGGLERGB";
        };

        gaming_LoL: gaming_LoL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 6 &rgb_ug RGB_TOG>;
            label = "GAMING_LOL";
        };

        oe_umlaut: oe_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp O>;
            label = "OE_UMLAUT";
        };

        ae_umlaut: ae_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp A>;
            label = "AE_UMLAUT";
        };

        ue_umlaut: ue_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp U>;
            label = "UE_UMLAUT";
        };

        doublestrafe: doublestrafe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1 &mkp LCLK>;
            label = "DOUBLESTRAFE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp ESC         &kp Q  &kp W  &kp E      &kp R      &kp T                                       &mmv MOVE_UP                            &kp Y        &kp U               &kp I           &kp O    &kp P      &kp BACKSPACE
&kp TAB         &kp A  &kp S  &kp D      &kp F      &kp G                       &mmv MOVE_LEFT  &mouseClick RCLK LCLK  &mmv MOVE_RIGHT  &kp H        &kp J               &kp K           &kp L    &kp SEMI   &kp DEL
&kp LEFT_SHIFT  &kp Z  &kp X  &kp C      &kp V      &kp B         &kp C_MUTE                    &mmv MOVE_DOWN                          &kp N        &kp M               &kp COMMA       &kp DOT  &kp SLASH  &kp RIGHT_SHIFT
                              &kp LCTRL  &kp SPACE  &kp LEFT_ALT                                                                        &lt 1 ENTER  &lt 2 SINGLE_QUOTE  &lt 3 ASTERISK
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        number {
            display-name = "NUMBER";
            bindings = <
&kp PRINTSCREEN  &kp F1  &kp F2   &kp F3   &kp F4        &none                      &kp UP_ARROW             &kp KP_NUM  &kp N7  &kp N8  &kp N9  &kp KP_PLUS      &kp KP_MULTIPLY
&kp INS          &kp F5  &kp F6   &kp F7   &kp F8        &none            &kp LEFT  &none         &kp RIGHT  &none       &kp N4  &kp N5  &kp N6  &kp KP_SUBTRACT  &kp KP_DIVIDE
&none            &kp F9  &kp F10  &kp F11  &kp F12       &none   &none              &kp DOWN                 &kp N0      &kp N1  &kp N2  &kp N3  &kp PERCENT      &kp EQUAL
                                  &trans   &kp LEFT_GUI  &trans                                              &none       &none   &none
            >;

            label = "number";
        };

        symbol {
            display-name = "SYMBOL";
            bindings = <
&kp CARET  &kp EXCL          &kp AT            &kp RA(N5)        &kp DLLR      &kp PRCNT                            &mmv MOVE_UP                     &kp ASTRK  &kp AMPS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SLASH  &kp COLON
&kp HASH   &kp RA(S)         &kp LESS_THAN     &kp GREATER_THAN  &mkp RCLK     &mkp MB4             &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT              &kp RBKT               &kp BSLH   &kp GRAVE
&kp RA(C)  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &kp RA(COMMA)     &kp RA(L)     &trans     &trans                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC              &kp RBRC               &kp PIPE   &kp TILDE
                                               &trans            &kp LEFT_GUI  &trans                                                                &kp RET    &trans     &trans
            >;
        };

        movement_settings {
            bindings = <
&bt BT_CLR       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                            &sys_reset               &kp PAGE_UP   &kp PAGE_DOWN  &kp SCROLLLOCK  &kp INSERT  &kp C_PAUSE     &kp PRINTSCREEN
&bt BT_CLR_ALL   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF            &bootloader  &trans        &soft_off  &kp ENTER     &kp LG(UP)     &kp HOME        &kp END     &kp UP_ARROW    &kp ENTER
&rgb_ug RGB_TOG  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans                 &out OUT_TOG             &kp LG(LEFT)  &kp LG(DOWN)   &kp LG(RIGHT)   &kp LEFT    &kp DOWN_ARROW  &kp RIGHT_ARROW
                                                   &trans           &kp LEFT_GUI     &mo 7                                                            &none         &none          &none
            >;

            label = "movement_settings";
        };

        Gaming {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                          &none         &none      &none  &none  &none  &none  &none
&kp TAB    &kp Q   &kp W   &kp E         &kp R         &kp T                    &none  &none  &none  &none      &none  &none  &none  &none  &none
&kp LSHFT  &kp A   &kp S   &kp D         &kp F         &kp G   &mt ENTER INS           &none         &none      &none  &none  &none  &none  &none
                           &trans        &trans        &trans                                        &kp ENTER  &to 5  &to 6
            >;

            label = "Gaming";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        LoL {
            label = "LoL";
            bindings = <
&kp ESC    &kp Q  &kp W  &kp E   &kp R   &kp T                           &none         &none      &none  &none  &none  &none  &none
&kp TAB    &kp A  &kp S  &kp D   &kp F   &kp G                    &none  &none  &none  &none      &none  &none  &none  &none  &none
&kp LSHFT  &kp Z  &kp X  &kp C   &kp V   &kp B   &mt ENTER INS           &none         &none      &none  &none  &none  &none  &none
                         &trans  &trans  &trans                                        &kp ENTER  &to 4  &to 6
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        ragnarok {
            label = "ragnarok";
            bindings = <
&kp ESC    &doublestrafe  &kp N2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                           &trans          &kp LA(V)  &kp LA(B)  &kp LA(E)  &kp LA(Q)  &kp LA(W)  &kp LA(U)
&kp TAB    &kp Q          &kp W   &kp E         &kp R         &kp T                    &trans  &trans  &trans  &kp LA(R)  &kp LA(J)  &kp LA(S)  &kp LA(Z)  &kp LA(H)  &kp LA(C)
&kp LSHFT  &kp A          &kp S   &kp D         &kp F         &kp G   &mt ENTER INS            &trans          &kp INS    &kp LA(L)  &kp LA(M)  &kp LA(Y)  &kp LA(G)  &kp LA(R)
                                  &trans        &trans        &trans                                           &kp ENTER  &to 4      &to 5
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        color {
            display-name = "color";
            bindings = <
&rgb_ug RGB_COLOR_HSB(0,100,50)    &rgb_ug RGB_COLOR_HSB(19,99,50)   &rgb_ug RGB_COLOR_HSB(28,100,50)   &rgb_ug RGB_COLOR_HSB(54,100,50)   &rgb_ug RGB_COLOR_HSB(81,100,50)  &rgb_ug RGB_COLOR_HSB(178,100,50)                  &none         &none  &none  &none  &none  &none  &none
&rgb_ug RGB_COLOR_HSB(199,100,49)  &rgb_ug RGB_COLOR_HSB(277,94,51)  &rgb_ug RGB_COLOR_HSB(264,100,50)  &rgb_ug RGB_COLOR_HSB(302,100,50)  &none                             &none                                       &none  &none  &none  &none  &none  &none  &none  &none  &none
&none                              &sys_reset                        &none                              &none                              &none                             &none                              &none           &none         &none  &none  &none  &none  &none  &none
                                                                                                        &none                              &none                             &none                                                            &none  &none  &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
