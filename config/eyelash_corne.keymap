#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

/ {
    behaviors {
        td0: td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        mouseMove: mouseMove {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSEMOVE";
            bindings = <&mmv>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-key-positions = <6 19 35 21>;
        };

        mouseClick: mouseClick {
            compatible = "zmk,behavior-hold-tap";
            label = "MOUSECLICK";
            bindings = <&mkp>, <&mkp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <20>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <100>;
    };

    combos {
        compatible = "zmk,combos";

        combo_Slash {
            bindings = <&kp SLASH>;
            key-positions = <24 10>;
            layers = <0>;
        };

        combo_Backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <24 39>;
            layers = <0>;
        };

        combo_Qutoes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <7 8>;
            layers = <0>;
        };

        combo_exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <23 8>;
        };

        combo_at {
            bindings = <&kp AT>;
            key-positions = <1 45>;
        };

        combo_Dollar {
            bindings = <&kp DLLR>;
            key-positions = <2 45>;
        };

        combo_caret {
            bindings = <&kp CARET>;
            key-positions = <45 0>;
        };

        GamingLayer {
            bindings = <&gaming_toggleRgb>;
            key-positions = <45 47 46>;
            layers = <0 2 1 9>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <25 26>;
        };

        windows {
            bindings = <&kp LEFT_WIN>;
            key-positions = <45 46>;
        };

        default_laout {
            bindings = <&defaul_toggleRgb>;
            key-positions = <46 47 45>;
            layers = <4 5 6>;
        };

        minus {
            bindings = <&kp KP_MINUS>;
            key-positions = <22 23>;
        };

        unterstrich {
            bindings = <&kp UNDERSCORE>;
            key-positions = <36 37>;
        };

        LoL {
            bindings = <&to 5>;
            key-positions = <45 47 36>;
        };

        oe {
            bindings = <&oe_umlaut>;
            key-positions = <10 3>;
        };

        ae {
            bindings = <&ae_umlaut>;
            key-positions = <3 14>;
        };

        ue {
            bindings = <&ue_umlaut>;
            key-positions = <3 8>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <7 22>;
        };
    };

    macros {
        gaming_toggleRgb: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 4 &rgb_ug RGB_TOG>;
            label = "NEW_MACRO";
        };

        defaul_toggleRgb: defaul_toggleRgb {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 0 &rgb_ug RGB_TOG>;
            label = "DEFAUL_TOGGLERGB";
        };

        gaming_LoL: gaming_LoL {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&to 5 &rgb_ug RGB_TOG>;
            label = "GAMING_LOL";
        };

        oe_umlaut: oe_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp O>;
            label = "OE_UMLAUT";
        };

        ae_umlaut: ae_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp A>;
            label = "AE_UMLAUT";
        };

        ue_umlaut: ue_umlaut {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DOUBLE_QUOTES &kp U>;
            label = "UE_UMLAUT";
        };

        doublestrafe: doublestrafe {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp NUMBER_1 &mkp LCLK>;
            label = "DOUBLESTRAFE";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "QWERTY";
            bindings = <
&kp TAB  &kp Q  &kp W  &kp E      &kp R      &kp T                                       &mmv MOVE_UP                            &kp Y        &kp U               &kp I           &kp O    &kp P      &kp BACKSPACE
&kp ESC  &kp A  &kp S  &kp D      &kp F      &kp G                       &mmv MOVE_LEFT  &mouseClick RCLK LCLK  &mmv MOVE_RIGHT  &kp H        &kp J               &kp K           &kp L    &kp SEMI   &kp DEL
&td0     &kp Z  &kp X  &kp C      &kp V      &kp B         &kp C_MUTE                    &mmv MOVE_DOWN                          &kp N        &kp M               &kp COMMA       &kp DOT  &kp SLASH  &kp LSHFT
                       &kp LCTRL  &kp SPACE  &kp LEFT_ALT                                                                        &lt 1 ENTER  &lt 2 SINGLE_QUOTE  &lt 3 ASTERISK
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        number {
            display-name = "NUMBER";
            bindings = <
&none  &kp F1  &kp F2   &kp F3   &kp F4   &none                      &kp UP_ARROW             &kp KP_NUM  &kp N7  &kp N8  &kp N9  &kp KP_PLUS      &kp KP_MULTIPLY
&none  &kp F5  &kp F6   &kp F7   &kp F8   &none            &kp LEFT  &none         &kp RIGHT  &none       &kp N4  &kp N5  &kp N6  &kp KP_SUBTRACT  &kp KP_DIVIDE
&none  &kp F9  &kp F10  &kp F11  &kp F12  &none   &none              &kp DOWN                 &kp N0      &kp N1  &kp N2  &kp N3  &kp PERCENT      &kp EQUAL
                        &trans   &trans   &trans                                              &none       &none   &none
            >;

            sensor-bindings = <&rgb_encoder>;
            label = "number";
        };

        symbol {
            display-name = "SYMBOL";
            bindings = <
&none  &kp EXCL      &kp AT        &kp HASH   &kp DLLR   &kp PRCNT                           &mmv MOVE_UP                     &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp COLON
&none  &bt BT_CLR    &mkp LCLK     &mkp MCLK  &mkp RCLK  &mkp MB4            &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&none  &out OUT_USB  &out OUT_BLE  &none      &none      &mkp MB5   &none                    &mmv MOVE_DOWN                   &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                                   &trans     &trans     &trans                                                               &kp RET    &none      &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };

        movement {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans    &trans          &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp UP_ARROW    &kp ENTER
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &kp LEFT  &kp DOWN_ARROW  &kp RIGHT_ARROW
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;

            label = "movement";
        };

        Gaming {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                          &none         &none      &none  &none  &none  &none  &none
&kp TAB    &kp Q   &kp W   &kp E         &kp R         &kp T                    &none  &none  &none  &none      &none  &none  &none  &none  &none
&kp LSHFT  &kp A   &kp S   &kp D         &kp F         &kp G   &mt ENTER INS           &none         &none      &none  &none  &none  &none  &none
                           &trans        &trans        &trans                                        &kp ENTER  &to 5  &to 6
            >;

            label = "Gaming";
            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        LoL {
            label = "LoL";
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                          &none         &none      &none  &none  &none  &none  &none
&kp TAB    &kp Q   &kp W   &kp E         &kp R         &kp V                    &none  &none  &none  &none      &none  &none  &none  &none  &none
&kp LSHFT  &kp B   &kp S   &kp D         &kp F         &kp G   &mt ENTER INS           &none         &none      &none  &none  &none  &none  &none
                           &trans        &trans        &trans                                        &kp ENTER  &to 4  &to 6
            >;

            sensor-bindings = <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };

        roTest {
            label = "roTest";
            bindings = <
&kp ESC    &doublestrafe  &kp N2  &kp NUMBER_3  &kp NUMBER_4  &kp N5                          &none         &none      &none  &none  &none  &none  &none
&kp TAB    &kp Q          &kp W   &kp E         &kp R         &kp T                    &none  &none  &none  &none      &none  &none  &none  &none  &none
&kp LSHFT  &kp A          &kp S   &kp D         &kp F         &kp G   &mt ENTER INS           &none         &none      &none  &none  &none  &none  &none
                                  &trans        &trans        &trans                                        &kp ENTER  &to 4  &to 5
            >;

            sensor-bindings = <&inc_dec_kp UP_ARROW DOWN_ARROW>;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        layer_7 {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                        &trans  &trans  &trans                                    &trans  &trans  &trans
            >;
        };

        settings {
            display-name = "SETTINGS";
            bindings = <
&studio_unlock  &kp F1      &kp F2     &kp F3       &kp F4     &kp F5                                  &mmv MOVE_UP                     &kp F6       &kp F7     &kp F8       &kp F9      &kp F10          &kp F11
&none           &none       &mkp LCLK  &mkp MCLK    &mkp RCLK  &mkp MB4                &mmv MOVE_LEFT  &mkp LCLK       &mmv MOVE_RIGHT  &bootloader  &mkp LCLK  &mkp MCLK    &mkp RCLK   &kp PRINTSCREEN  &kp F12
&none           &sys_reset  &none      &bootloader  &none      &mkp MB5  &kp C_MUTE                    &mmv MOVE_DOWN                   &none        &none      &bootloader  &sys_reset  &kp SCROLLLOCK   &kp PAUSE_BREAK
                                       &trans       &trans     &trans                                                                   &none        &none      &none
            >;

            sensor-bindings = <&scroll_encoder>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
